"use client";
import { useEffect, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import { db } from "@/lib/firebaseConfig";
import { doc, updateDoc, getDoc, setDoc } from "firebase/firestore";
import useAuth from "@/hooks/useAuth";
import usePlantActions from "@/hooks/usePlantActions";
import PlantStats from "@/components/PlantStats";

const GardenPage = () => {
  const { user, loading } = useAuth();
  const [plant, setPlant] = useState([]);
  const [coins, setCoins] = useState(0);
  const [inventory, setInventory] = useState([]);
  const [selectedSeed, setSelectedSeed] = useState(null);
  const router = useRouter();
  const { id } = useParams();

  // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å usePlantActions
  const {
    waterPlant,
    fertilizePlant,
    prunePlant,
    trainBonsai,
    health,
    xp,
    growthStage,
    waterLevel,
  } = usePlantActions(plant, setPlant);

  useEffect(() => {
    const fetchData = async () => {
      if (user && id) {
        try {
          // üõ†Ô∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
          const plotRef = doc(db, "plots", id);
          const plotSnapshot = await getDoc(plotRef);
          if (plotSnapshot.exists()) {
            setPlant({ id: plotSnapshot.id, ...plotSnapshot.data().plant });
          } else {
            router.push("/game/map");
            return;
          }

          // üõ†Ô∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          const userRef = doc(db, "users", user.uid);
          const userSnapshot = await getDoc(userRef);
          if (userSnapshot.exists()) {
            const userData = userSnapshot.data();
            setCoins(userData.coins || 0);
            setInventory(userData.inventory || []);
          }
        } catch (error) {
          console.error("Error fetching data:", error);
          alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        }
      }
    };

    fetchData();
  }, [user, id, plant]);

  if (loading) return <p>Loading...</p>;

  const isPlotEmpty =
    !plant || !plant.name || !plant.status || plant.planted === false;

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
  const plantSeed = async () => {
    if (!selectedSeed) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Å‡πà‡∏≠‡∏ô!");
      return;
    }

    try {
      const plotRef = doc(db, "plots", id);
      const userRef = doc(db, "users", user.uid);

      await setDoc(
        plotRef,
        {
          plant: {
            id: id,
            name: selectedSeed.name,
            owner: user.uid,
            status: "growing",
            plantedAt: new Date(),
            stage: "seedling",
            xp: 0,
            growthProgress: 0,
            lastWateredAt: null,
          },
          planted: true,
        },
        { merge: true }
      );

      // ‚úÖ ‡∏•‡∏ö‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å inventory
      const userSnapshot = await getDoc(userRef);
      if (userSnapshot.exists()) {
        const userData = userSnapshot.data();
        const updatedInventory = userData.inventory.filter(
          (item) => item.id !== selectedSeed.id
        );
        await updateDoc(userRef, { inventory: updatedInventory });
      }

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Firestore (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô)
      const updatedPlot = await getDoc(plotRef);
      if (updatedPlot.exists()) {
        setPlant({ id: updatedPlot.id, ...updatedPlot.data().plant });
      }

      alert(`‡∏õ‡∏•‡∏π‡∏Å ${selectedSeed.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üå±`);
      setSelectedSeed(null);
    } catch (error) {
      console.error("Error planting seed:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ");
    }
  };

  return (
    <div className="min-h-screen bg-green-100 p-6">
      <div className="bg-white shadow-md rounded-lg p-6 max-w-2xl mx-auto text-center">
        <h1 className="text-3xl mb-4 text-[#4caf50]">
          {plant?.name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ"}
        </h1>
        <PlantStats
          health={health}
          xp={xp}
          growthStage={growthStage}
          waterLevel={waterLevel}
        />
        {/* <p className="mb-2">‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: {health} ‚ù§Ô∏è</p>
        <p className="mb-2">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥: {waterLevel} üíß</p>
        <p className="mb-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {plant?.status || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
        <p className="mb-2">XP: {xp} üå±</p>
        <p className="mb-2">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï: {growthStage} üéã</p> */}
        <p className="mb-4">
          ‡∏õ‡∏•‡∏π‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠:{" "}
          {plant?.plantedAt
            ? new Date(plant.plantedAt.seconds * 1000).toLocaleDateString()
            : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏•‡∏π‡∏Å"}
        </p>

        {isPlotEmpty ? (
          <>
            <p className="text-red-500 mb-4">‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏õ‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏µ‡πâ!</p>
            <h2 className="text-xl mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå üå±</h2>
            <div className="flex flex-wrap justify-center gap-2 mb-4">
              {inventory.filter((item) => item.type === "seed").length === 0 ? (
                <p className="text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á</p>
              ) : (
                inventory
                  .filter((item) => item.type === "seed")
                  .map((seed, index) => (
                    <button
                      key={index}
                      onClick={() => setSelectedSeed(seed)}
                      className={`px-4 py-2 rounded-lg ${
                        selectedSeed?.id === seed.id
                          ? "bg-blue-500 text-white"
                          : "bg-gray-200"
                      }`}
                    >
                      {seed.name}
                    </button>
                  ))
              )}
            </div>

            <button
              onClick={plantSeed}
              className={`px-4 py-2 rounded bg-green-500 text-white ${
                !selectedSeed ? "opacity-50 cursor-not-allowed" : ""
              }`}
              disabled={!selectedSeed}
            >
              ‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ üå±
            </button>
          </>
        ) : (
          <div className="flex flex-col gap-3">
            <button
              onClick={() => waterPlant(plant)}
              className="px-4 py-2 bg-blue-500 text-white rounded mt-2"
              disabled={isPlotEmpty}
            >
              ‡∏£‡∏î‡∏ô‡πâ‡∏≥ üíß
            </button>

            <button
              onClick={() => fertilizePlant(plant)}
              className="px-4 py-2 bg-green-500 text-white rounded mt-2"
              disabled={isPlotEmpty}
            >
              ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢ üåø
            </button>

            <button
              onClick={() => prunePlant(plant)}
              className="px-4 py-2 bg-purple-500 text-white rounded mt-2"
              disabled={isPlotEmpty}
            >
              ‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á ‚úÇÔ∏è
            </button>

            <button
              onClick={() => trainBonsai(plant, "easy")}
              className="px-4 py-2 bg-red-500 text-white rounded mt-2"
              disabled={isPlotEmpty}
            >
              ‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã üåÄ
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default GardenPage;
