"use client";
import { useEffect, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import { db } from "@/lib/firebaseConfig";
import {
  doc,
  updateDoc,
  getDoc,
  setDoc,
} from "firebase/firestore";
import useAuth from "@/hooks/useAuth";
import usePlantActions from "@/hooks/usePlantActions";

const GardenPage = () => {
  const { user, loading } = useAuth();
  const [plant, setPlant] = useState([]);
  const [coins, setCoins] = useState(0);
  const [aestheticPoints, setAestheticPoints] = useState(0);
  const [inventory, setInventory] = useState([]);
  const [selectedSeed, setSelectedSeed] = useState(null);
  const router = useRouter();
  const { id } = useParams();

  // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å usePlantActions
  const { waterPlant, fertilizePlant, prunePlant, trainBonsai } = usePlantActions(user, setPlant, setCoins, setAestheticPoints, setInventory);

  // const useItem = async (itemId) => {
  //   if (!user) {
  //     alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö! ‚ùå");
  //     return;
  //   }
  
  //   try {
  //     const userRef = doc(db, "users", user.uid);
  //     const userSnapshot = await getDoc(userRef);
  
  //     if (!userSnapshot.exists()) {
  //       alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ! ‚ùå");
  //       return;
  //     }
  
  //     const userData = userSnapshot.data();
  //     if (!userData.inventory || userData.inventory.length === 0) {
  //       alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô inventory! ‚ùå");
  //       return;
  //     }
  
  //     // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
  //     const updatedInventory = userData.inventory
  //       .map((invItem) => {
  //         if (invItem.id === itemId) {
  //           const newCount = invItem.count - 1;
  //           return newCount > 0 ? { ...invItem, count: newCount } : null;
  //         }
  //         return invItem;
  //       })
  //       .filter(Boolean); // ‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà count = 0 ‡∏≠‡∏≠‡∏Å
  
  //     // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Inventory ‡πÉ‡∏ô Firestore
  //     await updateDoc(userRef, { inventory: updatedInventory });
  
  //     alert("‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéí");
  //   } catch (error) {
  //     console.error("Error using item:", error);
  //     alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ‚ùå");
  //   }
  // };
  
  useEffect(() => {
    const fetchData = async () => {
      if (user && id) {
        try {
          // üõ†Ô∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
          const plotRef = doc(db, "plots", id);
          const plotSnapshot = await getDoc(plotRef);
          if (plotSnapshot.exists()) {
            setPlant({ id: plotSnapshot.id, ...plotSnapshot.data().plant });
          } else {
            router.push("/game/map");
            return;
          }

          // üõ†Ô∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          const userRef = doc(db, "users", user.uid);
          const userSnapshot = await getDoc(userRef);
          if (userSnapshot.exists()) {
            const userData = userSnapshot.data();
            setCoins(userData.coins || 0);
            setAestheticPoints(userData.aestheticPoints || 0);
            setInventory(userData.inventory || []);
          }
        } catch (error) {
          console.error("Error fetching data:", error);
          alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        }
      }
    };

    fetchData();
  }, [user, id, plant]);

  if (loading) return <p>Loading...</p>;

  const isPlotEmpty = !plant || !plant.name || !plant.status || plant.planted === false;

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
  const plantSeed = async () => {
    if (!selectedSeed) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Å‡πà‡∏≠‡∏ô!");
      return;
    }

    try {
      const plotRef = doc(db, "plots", id);
      const userRef = doc(db, "users", user.uid);

      await setDoc(plotRef, {
        plant: {
          id: id,
          name: selectedSeed.name,
          owner: user.uid,
          status: "growing",
          plantedAt: new Date(),
          stage: "seedling",
          xp: 0,
          growthProgress: 0,
          lastWateredAt: null,
        },
        planted: true,
      }, { merge: true });

      // ‚úÖ ‡∏•‡∏ö‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å inventory
      const userSnapshot = await getDoc(userRef);
      if (userSnapshot.exists()) {
        const userData = userSnapshot.data();
        const updatedInventory = userData.inventory.filter(item => item.id !== selectedSeed.id);
        await updateDoc(userRef, { inventory: updatedInventory });
      }

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Firestore (‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô)
      const updatedPlot = await getDoc(plotRef);
      if (updatedPlot.exists()) {
        setPlant({ id: updatedPlot.id, ...updatedPlot.data().plant });
      }

      alert(`‡∏õ‡∏•‡∏π‡∏Å ${selectedSeed.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üå±`);
      setSelectedSeed(null);
    } catch (error) {
      console.error("Error planting seed:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ");
    }
  };

  // const waterPlant = async (plant) => {
  //   if (!plant || !plant.id) {  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ plant ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
  //     console.error("Plant is undefined or missing id:", plant);  // ‚úÖ Log Error
  //     alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏î‡∏ô‡πâ‡∏≥! ‚ùå");
  //     return;
  //   }

  //   const now = new Date();
  //   const lastWateredAt = plant.lastWateredAt?.toDate();

  //   // üõ†Ô∏è ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  //   if (lastWateredAt && (now - lastWateredAt) / 1000 / 60 < 60) {
  //     alert("‡∏Ñ‡∏∏‡∏ì‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏ô‡∏µ‡πâ! üíß‚è≥");
  //     return;
  //   }

  //   try {
  //     const plantRef = doc(db, "plots", plant.id);  // ‚úÖ plant.id ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô undefined
  //     await updateDoc(plantRef, {
  //       "plant.lastWateredAt": now,
  //       "plant.status": "growing faster",
  //     });

  //     alert(`‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ${plant.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üíß`);
  //     setPlant({ ...plant, lastWateredAt: now, status: "growing faster" });
  //   } catch (error) {
  //     console.error("Error watering plant:", error);
  //     alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ");
  //   }
  // };

  // const fertilizePlant = async (plant) => {
  //   if (!plant || !plant.id) {
  //     alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢! ‚ùå");
  //     return;
  //   }
  
  //   const now = new Date();
  //   const lastFertilizedAt = plant.lastFertilizedAt?.toDate();
  
  //   // üõ†Ô∏è ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢‡∏ã‡πâ‡∏≥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  //   if (lastFertilizedAt && (now - lastFertilizedAt) / 1000 / 60 < 60) {
  //     alert("‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢‡∏ï‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏ô‡∏µ‡πâ! üåø‚è≥");
  //     return;
  //   }
  
  //   if (coins < 5) {
  //     alert("‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢! ‚ùå");
  //     return;
  //   }
  
  //   try {
  //     const plantRef = doc(db, "plots", plant.id);
  //     const userRef = doc(db, "users", user.uid);
  //     const userSnapshot = await getDoc(userRef);
  
  //     if (!userSnapshot.exists()) {
  //       alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ! ‚ùå");
  //       return;
  //     }
  
  //     const userData = userSnapshot.data();
  //     let updatedInventory = userData.inventory || [];
  
  //     // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏õ‡∏∏‡πã‡∏¢‡πÉ‡∏ô inventory
  //     const fertilizerIndex = updatedInventory.findIndex(
  //       (item) => item.type === "fertilizer"
  //     );
  
  //     if (fertilizerIndex === -1) {
  //       alert("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πã‡∏¢‡πÉ‡∏ô Inventory! ‚ùå");
  //       return;
  //     }
  
  //     // ‚úÖ ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏∏‡πã‡∏¢ 1 ‡∏≠‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î
  //     if (updatedInventory[fertilizerIndex].count > 1) {
  //       updatedInventory[fertilizerIndex].count -= 1;
  //     } else {
  //       updatedInventory.splice(fertilizerIndex, 1);
  //     }
  
  //     // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firestore: ‡∏´‡∏±‡∏Å Coins ‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏õ‡∏∏‡πã‡∏¢
  //     await updateDoc(userRef, {
  //       coins: coins - 5,
  //       xp: (plant.xp || 0) + 10,
  //       inventory: updatedInventory, // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Inventory
  //     });
  
  //     // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
  //     await updateDoc(plantRef, {
  //       "plant.lastFertilizedAt": now,
  //       "plant.status": "growing faster",
  //     });
  
  //     alert(`‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ${plant.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üåø`);
  //     setCoins((prevCoins) => prevCoins - 5);
  //     setPlant({ ...plant, lastFertilizedAt: now, status: "growing faster" });
  
  //     // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Inventory ‡∏ö‡∏ô UI
  //     setInventory(updatedInventory);
  //   } catch (error) {
  //     console.error("Error fertilizing plant:", error);
  //     alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ‚ùå");
  //   }
  // };
  

  // const prunePlant = async (plant) => {
  //   const now = new Date();
  //   const lastPrunedAt = plant.lastPrunedAt?.toDate();

  //   // üõ†Ô∏è ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  //   if (lastPrunedAt && (now - lastPrunedAt) / 1000 / 60 < 60) {
  //     alert("‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á‡∏ï‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏ô‡∏µ‡πâ! ‚úÇÔ∏è‚è≥");
  //     return;
  //   }

  //   try {
  //     const plantRef = doc(db, "plots", plant.id);
  //     const userRef = doc(db, "users", user.uid);

  //     // ‡πÄ‡∏û‡∏¥‡πà‡∏° Aesthetic Points
  //     await updateDoc(userRef, {
  //       aestheticPoints: aestheticPoints + 5, // ‡πÄ‡∏û‡∏¥‡πà‡∏° 5 Aesthetic Points
  //     });

  //     // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ "‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
  //     await updateDoc(plantRef, {
  //       "plant.lastPrunedAt": now,
  //       "plant.status": "looking good", // üõ†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏î‡∏π‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"
  //     });

  //     alert(`‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ${plant.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‚úÇÔ∏è‚≠ê`);
  //     setAestheticPoints((prevPoints) => prevPoints + 5); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Aesthetic Points ‡πÉ‡∏ô UI
  //     setPlant({ ...plant, lastPrunedAt: now, status: "looking good" });
  //   } catch (error) {
  //     console.error("Error pruning plant:", error);
  //     alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ");
  //   }
  // };

  // // üõ†Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã
  // const trainBonsai = async (plant, difficulty) => {
  //   const now = new Date();
  //   const lastTrainedAt =
  //     plant.lastTrainedAt && typeof plant.lastTrainedAt.toDate === "function"
  //       ? plant.lastTrainedAt.toDate() // ‚úÖ ‡πÉ‡∏ä‡πâ .toDate() ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Timestamp
  //       : null;

  //   // üõ†Ô∏è ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ù‡∏∂‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  //   if (lastTrainedAt && (now - lastTrainedAt) / 1000 / 60 < 60) {
  //     alert("‡∏Ñ‡∏∏‡∏ì‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã‡∏ï‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏ô‡∏µ‡πâ! üåÄ‚è≥");
  //     return;
  //   }

  //   // üõ†Ô∏è ‡πÄ‡∏ä‡πá‡∏Å Coins ‡∏ß‡πà‡∏≤‡∏û‡∏≠‡πÑ‡∏´‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 Coins)
  //   if (coins < 10) {
  //     alert("‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã! ‚ùå");
  //     return;
  //   }

  //   // üõ†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
  //   const successRate = {
  //     easy: 0.8,
  //     medium: 0.6,
  //     hard: 0.4,
  //   }[difficulty];

  //   const isSuccess = Math.random() <= successRate; // üé≤ ‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

  //   try {
  //     const plantRef = doc(db, "plots", plant.id);
  //     const userRef = doc(db, "users", user.uid);

  //     if (isSuccess) {
  //       // üéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏° Aesthetic Points
  //       await updateDoc(userRef, {
  //         aestheticPoints: aestheticPoints + 10,
  //       });

  //       await updateDoc(plantRef, {
  //         "plant.status": "trained",
  //         "plant.lastTrainedAt": now,
  //       });

  //       alert(`‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üåÄ +10 Aesthetic Points ‚≠ê`);
  //       setAestheticPoints((prev) => prev + 10);
  //     } else {
  //       // ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚Üí ‡πÄ‡∏™‡∏µ‡∏¢ Coins 10
  //       await updateDoc(userRef, {
  //         coins: coins - 10,
  //       });

  //       await updateDoc(plantRef, {
  //         "plant.status": "failed",
  //         "plant.lastTrainedAt": now,
  //       });

  //       alert(`‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß... ‚ùå -10 Coins üí∏`);
  //       setCoins((prev) => prev - 10);
  //     }

  //     // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ù‡∏∂‡∏Å
  //     setPlant((prevPlant) => ({
  //       ...prevPlant,
  //       lastTrainedAt: now,
  //       status: isSuccess ? "trained" : "failed",
  //     }));

  //   } catch (error) {
  //     console.error("Error training bonsai:", error);
  //     alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã");
  //   }
  // };

  return (
    <div className="min-h-screen bg-green-100 p-6">
      <div className="bg-white shadow-md rounded-lg p-6 max-w-2xl mx-auto text-center">
        <h1 className="text-3xl mb-4 text-[#4caf50]">
          {plant?.name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ"}
        </h1>
        <p className="mb-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {plant?.status || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}</p>
        <p className="mb-2">‡∏£‡∏∞‡∏î‡∏±‡∏ö: {plant?.stage || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï"}</p>
        <p className="mb-4">
          ‡∏õ‡∏•‡∏π‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠:{" "}
          {plant?.plantedAt
            ? new Date(plant.plantedAt.seconds * 1000).toLocaleDateString()
            : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏õ‡∏•‡∏π‡∏Å"}
        </p>

        {isPlotEmpty ? (
          <>
            <p className="text-red-500 mb-4">‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏õ‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏µ‡πâ!</p>
            <h2 className="text-xl mb-2">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå üå±</h2>
            <div className="flex flex-wrap justify-center gap-2 mb-4">
              {inventory.filter(item => item.type === "seed").length === 0 ? (
                <p className="text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á</p>
              ) : (
                inventory
                  .filter(item => item.type === "seed")
                  .map((seed, index) => (
                    <button
                      key={index}
                      onClick={() => setSelectedSeed(seed)}
                      className={`px-4 py-2 rounded-lg ${selectedSeed?.id === seed.id
                        ? "bg-blue-500 text-white"
                        : "bg-gray-200"
                        }`}
                    >
                      {seed.name}
                    </button>
                  ))
              )}
            </div>

            <button
              onClick={plantSeed}
              className={`px-4 py-2 rounded bg-green-500 text-white ${!selectedSeed ? "opacity-50 cursor-not-allowed" : ""
                }`}
              disabled={!selectedSeed}
            >
              ‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ üå±
            </button>
          </>
        ) : (
          <div className="flex flex-col gap-3">
            <button
              onClick={() => waterPlant(plant)}
              className="px-4 py-2 bg-blue-500 text-white rounded mt-2"
              disabled={isPlotEmpty}
            >
              ‡∏£‡∏î‡∏ô‡πâ‡∏≥ üíß
            </button>

            <button
              onClick={() => fertilizePlant(plant)}
              className="px-4 py-2 bg-green-500 text-white rounded mt-2"
              disabled={isPlotEmpty}
            >
              ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢ üåø
            </button>

            <button
              onClick={() => prunePlant(plant)}
              className="px-4 py-2 bg-purple-500 text-white rounded mt-2"
              disabled={isPlotEmpty}
            >
              ‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á ‚úÇÔ∏è
            </button>

            <button
              onClick={() => trainBonsai(plant, "easy")}
              className="px-4 py-2 bg-red-500 text-white rounded mt-2"
              disabled={isPlotEmpty}
            >
              ‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã üåÄ
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default GardenPage;
