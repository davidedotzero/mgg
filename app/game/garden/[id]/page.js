"use client";
import { useEffect, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import { db } from "@/lib/firebaseConfig";
import {
  collection,
  getDocs,
  doc,
  updateDoc,
  getDoc,
} from "firebase/firestore";
import useAuth from "@/hooks/useAuth";

const GardenPage = () => {
  const { user, loading } = useAuth();
  const [plants, setPlants] = useState([]);
  const [coins, setCoins] = useState(0);
  const [aestheticPoints, setAestheticPoints] = useState(0);
  const router = useRouter();
  const params = useParams();

  // üõ†Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã
  const trainBonsai = async (plant, difficulty) => {
    const now = new Date();
    const lastTrainedAt =
      plant.lastTrainedAt && typeof plant.lastTrainedAt.toDate === "function"
        ? plant.lastTrainedAt.toDate() // ‚úÖ ‡πÉ‡∏ä‡πâ .toDate() ‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Timestamp
        : null;

    // üõ†Ô∏è ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ù‡∏∂‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (lastTrainedAt && (now - lastTrainedAt) / 1000 / 60 < 60) {
      alert("‡∏Ñ‡∏∏‡∏ì‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã‡∏ï‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏ô‡∏µ‡πâ! üåÄ‚è≥");
      return;
    }

    // üõ†Ô∏è ‡πÄ‡∏ä‡πá‡∏Å Coins ‡∏ß‡πà‡∏≤‡∏û‡∏≠‡πÑ‡∏´‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 Coins)
    if (coins < 10) {
      alert("‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã! ‚ùå");
      return;
    }

    // üõ†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å
    const successRate = {
      easy: 0.8,
      medium: 0.6,
      hard: 0.4,
    }[difficulty];

    const isSuccess = Math.random() <= successRate; // üé≤ ‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

    try {
      const plantRef = doc(db, "plots", plant.id);
      const userRef = doc(db, "users", user.uid);

      if (isSuccess) {
        // üéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡πÄ‡∏û‡∏¥‡πà‡∏° Aesthetic Points
        await updateDoc(userRef, {
          aestheticPoints: aestheticPoints + 10,
        });

        await updateDoc(plantRef, {
          "plant.status": "trained",
          "plant.lastTrainedAt": now,
        });

        alert(`‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üåÄ +10 Aesthetic Points ‚≠ê`);
        setAestheticPoints((prev) => prev + 10);
      } else {
        // ‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚Üí ‡πÄ‡∏™‡∏µ‡∏¢ Coins 10
        await updateDoc(userRef, {
          coins: coins - 10,
        });

        await updateDoc(plantRef, {
          "plant.status": "failed",
          "plant.lastTrainedAt": now,
        });

        alert(`‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß... ‚ùå -10 Coins üí∏`);
        setCoins((prev) => prev - 10);
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ù‡∏∂‡∏Å
      setPlants((prevPlants) =>
      Array.isArray(prevPlants)
        ? prevPlants.map((p) =>
          p.id === plant.id
            ? {
                ...p,
                lastTrainedAt: now,
                status: isSuccess ? "trained" : "failed",
              }
            : p
        )
        : [{ ...prevPlants, lastTrainedAt: now, status: "‡∏î‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß" }]
      );
    } catch (error) {
      console.error("Error training bonsai:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã");
    }
  };

  const useItem = async (itemId) => {
    try {
      const userRef = doc(db, "users", user.uid);
      const userSnapshot = await getDoc(userRef);
      const userData = userSnapshot.data();

      if (userData && userData.inventory) {
        // üõ†Ô∏è ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Inventory
        const updatedInventory = userData.inventory
          .map((invItem) => {
            if (invItem.id === itemId) {
              const newCount = invItem.count - 1; // üõ†Ô∏è ‡∏•‡∏î `count` ‡∏•‡∏á 1
              return newCount > 0
                ? { ...invItem, count: newCount } // üõ†Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `count` ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
                : null; // üõ†Ô∏è ‡∏ñ‡πâ‡∏≤ `count` = 0 ‚Üí ‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ
            }
            return invItem;
          })
          .filter(Boolean); // üõ†Ô∏è ‡∏Å‡∏£‡∏≠‡∏á `null` ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Array

        // üõ†Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Inventory ‡πÉ‡∏ô Firestore
        await updateDoc(userRef, {
          inventory: updatedInventory,
        });

        alert("‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéí");
      } else {
        alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô Inventory! ‚ùå");
      }
    } catch (error) {
      console.error("Error using item:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ‚ùå");
    }
  };

  const prunePlant = async (plant) => {
    const now = new Date();
    const lastPrunedAt = plant.lastPrunedAt?.toDate();

    // üõ†Ô∏è ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (lastPrunedAt && (now - lastPrunedAt) / 1000 / 60 < 60) {
      alert("‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á‡∏ï‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏ô‡∏µ‡πâ! ‚úÇÔ∏è‚è≥");
      return;
    }

    try {
      const plantRef = doc(db, "plots", plant.id);
      const userRef = doc(db, "users", user.uid);

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° Aesthetic Points
      await updateDoc(userRef, {
        aestheticPoints: aestheticPoints + 5, // ‡πÄ‡∏û‡∏¥‡πà‡∏° 5 Aesthetic Points
      });

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ "‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
      await updateDoc(plantRef, {
        "plant.lastPrunedAt": now,
        "plant.status": "looking good", // üõ†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏î‡∏π‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"
      });

      alert(`‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ${plant.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‚úÇÔ∏è‚≠ê`);
      setAestheticPoints((prevPoints) => prevPoints + 5); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Aesthetic Points ‡πÉ‡∏ô UI
      setPlants((prevPlants) =>
        prevPlants.map((p) =>
          p.id === plant.id
            ? { ...p, lastPrunedAt: now, status: "looking good" }
            : p
        )
      );
    } catch (error) {
      console.error("Error pruning plant:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ");
    }
  };

  const fertilizePlant = async (plant) => {
    const now = new Date();
    const lastFertilizedAt = plant.lastFertilizedAt?.toDate();

    if (lastFertilizedAt && (now - lastFertilizedAt) / 1000 / 60 < 60) {
      alert("‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢‡∏ï‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏ô‡∏µ‡πâ! üåø‚è≥");
      return;
    }

    if (coins < 5) {
      alert("‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢! ‚ùå");
      return;
    }

    try {
      const plantRef = doc(db, "plots", plant.id);
      const userRef = doc(db, "users", user.uid);

      // ‡∏´‡∏±‡∏Å Coins ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° XP
      await updateDoc(userRef, {
        coins: coins - 5,
        xp: (plant.xp || 0) + 10,
      });
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      await updateDoc(plantRef, {
        "plant.lastFertilizedAt": now,
        "plant.status": "growing faster", // üõ†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ï‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
      });

      alert(`‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ${plant.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üåø`);
      setCoins((prevCoins) => prevCoins - 5); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Coins ‡πÉ‡∏ô UI
      setPlants((prevPlants) =>
        prevPlants.map((p) =>
          p.id === plant.id
            ? { ...p, lastFertilizedAt: now, status: "growing faster" }
            : p
        )
      );
    } catch (error) {
      console.error("Error fertilizing plant:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ");
    }
  };

  const waterPlant = async (plant) => {
    if (!plant || !plant.id) {  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ plant ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
      console.error("Plant is undefined or missing id:", plant);  // ‚úÖ Log Error
      alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏î‡∏ô‡πâ‡∏≥! ‚ùå");
      return;
    }
  
    const now = new Date();
    const lastWateredAt = plant.lastWateredAt?.toDate();
  
    // üõ†Ô∏è ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (lastWateredAt && (now - lastWateredAt) / 1000 / 60 < 60) {
      alert("‡∏Ñ‡∏∏‡∏ì‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏ô‡∏µ‡πâ! üíß‚è≥");
      return;
    }
  
    try {
      const plantRef = doc(db, "plots", plant.id);  // ‚úÖ plant.id ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô undefined
      await updateDoc(plantRef, {
        "plant.lastWateredAt": now,
        "plant.status": "growing faster", // üõ†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ï‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
      });
  
      alert(`‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ${plant.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üíß`);
      setPlants((prevPlants) =>
        prevPlants.map((p) =>
          p.id === plant.id
            ? { ...p, lastWateredAt: now, status: "growing faster" }
            : p
        )
      );
    } catch (error) {
      console.error("Error watering plant:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ");
    }
  };
  

  useEffect(() => {
    const fetchData = async () => {
      if (user && params?.id) {
        try {
          // üõ†Ô∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
          const plotRef = doc(db, "plots", params.id);
          const plotSnapshot = await getDoc(plotRef);
          if (plotSnapshot.exists()) {
            setPlants({ id: plotSnapshot.id, ...plotSnapshot.data().plant });
          } else {
            router.push("/game/map");
            return;
          }

          // üõ†Ô∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
          const userRef = doc(db, "users", user.uid);
          const userSnapshot = await getDoc(userRef);
          if (userSnapshot.exists()) {
            const userData = userSnapshot.data();
            setCoins(userData.coins || 0);
            setAestheticPoints(userData.aestheticPoints || 0);
          }
        } catch (error) {
          console.error("Error fetching data:", error);
          alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
        }
      }
    };

    fetchData();
  }, [user, params?.id]); // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Å params.id ‡πÅ‡∏•‡∏∞ user

  if (loading) return <p>Loading...</p>;

  return (
    <div className="min-h-screen bg-green-100 p-6">
      <div className="bg-white shadow-md rounded-lg p-6 max-w-2xl mx-auto">
        <h1 className="text-3xl mb-4 text-center text-[#4caf50]">
          {plants?.name || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠"}
        </h1>
        <p className="mb-2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {plants?.status || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>
        <p className="mb-2">‡∏£‡∏∞‡∏î‡∏±‡∏ö: {plants?.stage || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}</p>
        <p className="mb-2">XP: {plants?.xp || 0}/100</p>
        <p className="mb-2">Aesthetic Points: {aestheticPoints} ‚≠ê</p>
        <p className="mb-4">
          ‡∏õ‡∏•‡∏π‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠:{" "}
          {plants?.plantedAt
            ? new Date(plants.plantedAt.seconds * 1000).toLocaleDateString()
            : "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"}
        </p>
        <button
          onClick={() => waterPlant(plants)}
          className="px-4 py-2 bg-blue-500 text-white rounded mt-2"
        >
          ‡∏£‡∏î‡∏ô‡πâ‡∏≥ üíß
        </button>
        <button
          onClick={() => {
            fertilizePlant(plants);
            useItem("fertilizer"); // üõ†Ô∏è ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πã‡∏¢ 1 ‡∏≠‡∏±‡∏ô üåø
          }}
          className="px-4 py-2 bg-green-500 text-white rounded mt-2"
        >
          ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πã‡∏¢ üåø
        </button>
        <button
          onClick={() => prunePlant(plants)}
          className="px-4 py-2 bg-purple-500 text-white rounded mt-2"
        >
          ‡∏ï‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏¥‡πà‡∏á ‚úÇÔ∏è
        </button>
        <button
          onClick={() => {
            trainBonsai(plants, "easy");
            useItem("wire"); // üõ†Ô∏è ‡πÉ‡∏ä‡πâ‡∏•‡∏ß‡∏î 1 ‡∏≠‡∏±‡∏ô üåø
          }}
          className="px-4 py-2 bg-blue-500 text-white rounded mt-2"
        >
          ‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã (‡∏á‡πà‡∏≤‡∏¢) üåÄ
        </button>
        <button
          onClick={() => {
            trainBonsai(plants, "medium");
            useItem("wire"); // üõ†Ô∏è ‡πÉ‡∏ä‡πâ‡∏•‡∏ß‡∏î 1 ‡∏≠‡∏±‡∏ô üåø
          }}
          className="px-4 py-2 bg-orange-500 text-white rounded mt-2"
        >
          ‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã (‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á) üåÄ
        </button>
        <button
          onClick={() => {
            trainBonsai(plants, "hard");
            useItem("wire"); // üõ†Ô∏è ‡πÉ‡∏ä‡πâ‡∏•‡∏ß‡∏î 1 ‡∏≠‡∏±‡∏ô üåø
          }}
          className="px-4 py-2 bg-red-500 text-white rounded mt-2"
        >
          ‡∏ù‡∏∂‡∏Å‡∏ó‡∏£‡∏á‡∏ö‡∏≠‡∏ô‡πÑ‡∏ã (‡∏¢‡∏≤‡∏Å) üåÄ
        </button>
      </div>
    </div>
  );
};

export default GardenPage;
