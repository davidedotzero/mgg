"use client";
import { useEffect, useState } from "react";
import { db } from "@/lib/firebaseConfig";
import { collection, getDocs, doc, updateDoc, getDoc } from "firebase/firestore";
import useAuth from "@/hooks/useAuth";

const GardenPage = () => {
  const { user, loading } = useAuth();
  const [plants, setPlants] = useState([]);

  const waterPlant = async (plant) => {
    const now = new Date();
    const lastWateredAt = plant.lastWateredAt?.toDate();

    // üõ†Ô∏è ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (lastWateredAt && (now - lastWateredAt) / 1000 / 60 < 60) {
      alert("‡∏Ñ‡∏∏‡∏ì‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ô‡∏≤‡∏ô‡∏°‡∏≤‡∏ô‡∏µ‡πâ! üíß‚è≥");
      return;
    }

    try {
      const plantRef = doc(db, "plots", plant.id);
      await updateDoc(plantRef, {
        "plant.lastWateredAt": now,
        "plant.status": "growing faster", // üõ†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ï‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
      });

      alert(`‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ${plant.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üíß`);
      setPlants((prevPlants) =>
        prevPlants.map((p) =>
          p.id === plant.id
            ? { ...p, lastWateredAt: now, status: "growing faster" }
            : p
        )
      );
    } catch (error) {
      console.error("Error watering plant:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ");
    }
  };

  useEffect(() => {
    if (user) {
      const fetchPlants = async () => {
        const plotsSnapshot = await getDocs(collection(db, "plots"));
        const plantData = plotsSnapshot.docs
          .filter((doc) => doc.data().planted) // üõ†Ô∏è ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡πÅ‡∏•‡πâ‡∏ß
          .map((doc) => ({
            id: doc.id,
            ...doc.data().plant, // üõ†Ô∏è ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô `plant` Map
          }));
        setPlants(plantData);
        console.log("‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å:", plantData); // üõ†Ô∏è Log ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏´‡∏°
      };

      fetchPlants(); // üõ†Ô∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    }
  }, [user]);

  if (loading) return <p>Loading...</p>;

  return (
    <div className="min-h-screen bg-green-100 p-6">
      <h1 className="text-3xl mb-6 text-center">‡∏™‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô üåø</h1>
      {plants.length === 0 ? (
        <p className="text-center text-gray-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏™‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì!</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {plants.map((plant) => (
            <div key={plant.id} className="bg-white shadow-md rounded-lg p-4">
              <h3 className="text-xl mb-2">{plant.name}</h3>
              <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {plant.status}</p>
              <p>‡∏õ‡∏•‡∏π‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date(plant.plantedAt.seconds * 1000).toLocaleDateString()}</p>
              <button
                onClick={() => waterPlant(plant)}
                className="px-4 py-2 bg-blue-500 text-white rounded mt-2"
              >
                ‡∏£‡∏î‡∏ô‡πâ‡∏≥ üíß
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default GardenPage;
