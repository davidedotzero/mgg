"use client";
import { useEffect, useState } from "react";
import { db } from "@/lib/firebaseConfig";
import { collection, getDocs, addDoc, updateDoc, doc, increment, deleteDoc, getDoc } from "firebase/firestore";
import useAuth from "@/hooks/useAuth";

const GardenPage = () => {
    const [seeds, setSeeds] = useState([]);
    const [plants, setPlants] = useState([]);
    const { user, loading } = useAuth();

    useEffect(() => {
        if (user) {
            const fetchInventory = async () => {
                const userRef = doc(db, "users", user.uid);
                const userSnapshot = await getDoc(userRef);
                const userData = userSnapshot.data();

                if (userData && userData.inventory) {
                    setSeeds(userData.inventory);
                } else {
                    setSeeds([]); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á
                }
            };

            const fetchPlants = async () => {
                const plantsSnapshot = await getDocs(collection(db, "plants"));
                const plantData = plantsSnapshot.docs.map((doc) => ({
                    id: doc.id,
                    ...doc.data(),
                }));
                setPlants(plantData);
            };

            fetchInventory();
            fetchPlants();
        }
    }, [user]);

    const plantSeed = async (seed) => {
        try {
            const plantRef = await addDoc(collection(db, "plants"), {
                name: seed.name,
                plantedAt: new Date(),
                status: "growing",
                owner: user.uid,
            });

            const userRef = doc(db, "users", user.uid);
            await updateDoc(userRef, {
                inventory: seeds.filter((item) => item.id !== seed.id),
            });

            alert(`‡∏õ‡∏•‡∏π‡∏Å ${seed.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
        } catch (error) {
            console.error("Error planting seed:", error);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ");
        }
    };

    const harvestPlant = async (plant) => {
        try {
            const timeDiff = (new Date() - new Date(plant.plantedAt.toDate())) / 1000 / 60;
            if (timeDiff >= 1) { // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 1 ‡∏ô‡∏≤‡∏ó‡∏µ = ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
                const userRef = doc(db, "users", user.uid);
                await updateDoc(userRef, {
                    coins: increment(100), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç 100
                });
                await deleteDoc(doc(db, "plants", plant.id));
                alert(`‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß ${plant.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! +100 Coins`);
            } else {
                alert("‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß!");
            }
        } catch (error) {
            console.error("Error harvesting plant:", error);
            alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß");
        }
    };

    if (loading) return <p>Loading...</p>;

    return (
        <div className="min-h-screen bg-green-100 p-6">
            <h1 className="text-3xl mb-6 text-center">My Garden</h1>

            <h2 className="text-2xl mb-4">üå± ‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                {seeds.map((seed, index) => (
                    <div key={`${seed.id}-${index}`} className="bg-white shadow-md rounded-lg p-4">
                        <h3 className="text-xl mb-2">{seed.name}</h3>
                        <button
                            onClick={() => plantSeed(seed)}
                            className="px-4 py-2 bg-green-500 text-white rounded"
                        >
                            ‡∏õ‡∏•‡∏π‡∏Å
                        </button>
                    </div>
                ))}
            </div>

            <h2 className="text-2xl mb-4">üå≥ ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {plants.map((plant) => (
                    <div key={plant.id} className="bg-white shadow-md rounded-lg p-4">
                        <h3 className="text-xl mb-2">{plant.name}</h3>
                        <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {plant.status}</p>
                        <button
                            onClick={() => harvestPlant(plant)}
                            className="px-4 py-2 bg-yellow-500 text-white rounded mt-2"
                        >
                            ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
                        </button>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default GardenPage;


// üõ†Ô∏è ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î: ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ

//     plantSeed: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏•‡∏π‡∏Å‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
//         ‡∏™‡∏£‡πâ‡∏≤‡∏á Document ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô plants:
//             name, plantedAt, status, owner (UID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
//         ‡∏•‡∏ö‡πÄ‡∏°‡∏•‡πá‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å inventory ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
//         ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤ ‡∏õ‡∏•‡∏π‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

//     harvestPlant: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
//         ‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å (plantedAt):
//             ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ô‡∏≤‡∏ó‡∏µ ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏î‡πâ (status: ready)
//         ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç (+100 coins) ‡πÉ‡∏ô Firestore
//         ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
//         ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!

//     ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ:
//         ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏•‡πá‡∏î‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏à‡∏≤‡∏Å inventory
//         ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡∏à‡∏≤‡∏Å plants
//         ‡∏õ‡∏∏‡πà‡∏° ‡∏õ‡∏•‡∏π‡∏Å ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß ‡πÉ‡∏ä‡πâ Tailwind CSS ‡∏à‡∏±‡∏î‡∏™‡∏ß‡∏¢