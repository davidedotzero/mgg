import { useState, useEffect } from "react";
import { db } from "@/lib/firebaseConfig";
import { doc, getDoc, updateDoc } from "firebase/firestore";

const useInventory = (user, setCoins) => {
  const [inventory, setInventory] = useState([]);
  const [seeds, setSeeds] = useState([]);
  const [items, setItems] = useState([]);
  const [fertilizers, setFertilizers] = useState([]);

  useEffect(() => {
    if (!user) return;

    const fetchInventory = async () => {
      try {
        const userRef = doc(db, "users", user.uid);
        const userSnapshot = await getDoc(userRef);

        if (userSnapshot.exists()) {
          const userData = userSnapshot.data();
          setInventory(userData.inventory || []);
          setCoins(userData.coins || 0);

          // üéØ ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
          setSeeds(userData.inventory?.filter((item) => item.type === "seed") || []);
          setItems(userData.inventory?.filter((item) => item.type === "item") || []);
          setFertilizers(userData.inventory?.filter((item) => item.type === "fertilizer") || []);
        }
      } catch (error) {
        console.error("Error fetching inventory:", error);
      }
    };

    fetchInventory();
  }, [user, setCoins]);

  // üõ†Ô∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
  const useItem = async (itemId) => {
    if (!user) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö!");

    try {
      const userRef = doc(db, "users", user.uid);
      const userSnapshot = await getDoc(userRef);
      if (!userSnapshot.exists()) return alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ!");

      const userData = userSnapshot.data();
      let updatedInventory = [...userData.inventory];

      // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
      const itemIndex = updatedInventory.findIndex((item) => item.id === itemId);
      if (itemIndex === -1) return alert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á!");

      // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏° 1 ‡∏ä‡∏¥‡πâ‡∏ô
      if (updatedInventory[itemIndex].count > 1) {
        updatedInventory[itemIndex].count -= 1;
      } else {
        updatedInventory.splice(itemIndex, 1);
      }

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Firebase
      await updateDoc(userRef, { inventory: updatedInventory });

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State
      setInventory(updatedInventory);
      alert("‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! üéí");
    } catch (error) {
      console.error("Error using item:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏ó‡∏° ‚ùå");
    }
  };

  return { inventory, seeds, items, fertilizers, useItem };
};

export default useInventory;
